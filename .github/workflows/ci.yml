name: CI Build and Package

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-macos:
    name: Build macOS PKG Installer
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Add Rust targets
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build for x86_64-apple-darwin
        run: cargo build --release --target x86_64-apple-darwin

      - name: Build for aarch64-apple-darwin
        run: cargo build --release --target aarch64-apple-darwin

      - name: Create universal binary and PKG installer
        run: |
          chmod +x build_macos.sh
          ./build_macos.sh

      - name: Upload macOS PKG installer
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: "*.pkg"

  build-windows:
    name: Build Windows MSI Installer
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Add Rust targets
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build for x86_64-pc-windows-msvc
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Install WiX Toolset
        run: |
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe" -OutFile "wix311.exe"
          Start-Process -FilePath "wix311.exe" -ArgumentList "/quiet" -Wait
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Create MSI installer
        run: |
          .\build_windows.ps1

      - name: Upload Windows MSI installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: "*.msi"

  build-linux:
    name: Build Linux DEB Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev pkg-config fakeroot

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build for x86_64-unknown-linux-gnu
        run: cargo build --release

      - name: Create DEB package
        run: |
          ls -l debian || true
          cat debian/snappy-web-agent.service
          cargo deb --no-build
          echo "Generated .deb files:" && ls -1 target/debian/*.deb

      - name: Inspect DEB (list files)
        run: |
          DEB_FILE=$(ls target/debian/snappy-web-agent_*.deb | head -n1)
          echo "Inspecting $DEB_FILE" && dpkg-deb -c "$DEB_FILE"

      - name: Upload Linux DEB package
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: "target/debian/*.deb"
